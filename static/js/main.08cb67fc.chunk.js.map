{"version":3,"sources":["Components/Circle/Circle.js","Components/GameOver/GameOver.js","App.js","index.js"],"names":["Circle","props","className","color","active","onClick","click","GameOver","score","closeHandler","getRndInteger","min","max","Math","floor","random","App","state","current","rounds","counter","showGameOver","gameHasStarted","circles","id","pace","timer","undefined","pickedButtons","hitButtons","clickHandler","push","setState","stopHandler","nextCircle","nextActive","setTimeout","console","log","startHandler","clearTimeout","window","location","reload","this","map","circle","Component","ReactDOM","render","document","getElementById"],"mappings":"gQAWeA,G,YARA,SAACC,GACZ,OACI,qBAAKC,UAAS,iBAAYD,EAAME,MAAlB,YAA2BF,EAAMG,OAAS,UAAY,IAAMC,QAASJ,EAAMK,UCQlFC,G,MAVE,SAACN,GACd,OAAO,qBAAKC,UAAU,UAAf,SACH,sBAAKA,UAAU,eAAf,UACI,2CACA,iDAAoBD,EAAMO,SAC1B,wBAAQH,QAASJ,EAAMQ,aAAvB,0BCFNC,EAAgB,SAACC,EAAKC,GAC1B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,GAwGxCK,E,4MApGbC,MAAQ,CACNT,MAAO,EACPU,QAAS,EACTC,OAAQ,EACRC,QAAS,EACTC,cAAc,EACdC,gBAAgB,EAChBC,QAAS,CACP,CAAEC,GAAI,EAAGrB,MAAO,SAChB,CAAEqB,GAAI,EAAGrB,MAAO,QAChB,CAAEqB,GAAI,EAAGrB,MAAO,OAChB,CAAEqB,GAAI,EAAGrB,MAAO,Y,EAIpBsB,KAAO,K,EACPC,WAAQC,E,EACRC,cAAgB,G,EAChBC,WAAa,G,EAEbC,aAAe,SAACN,GAEd,EAAKK,WAAWE,KAAKP,GAEjB,EAAKK,WAAW,EAAKZ,MAAMG,WAAa,EAAKQ,cAAc,EAAKX,MAAMG,SAI1E,EAAKY,SAAS,CACZxB,MAAO,EAAKS,MAAMT,MAAQ,EAC1BY,QAAS,EAAKH,MAAMG,QAAU,EAC9BD,OAAQ,IANR,EAAKc,e,EAUTC,WAAa,WAEX,GAAI,EAAKjB,MAAME,QAAU,GACvB,EAAKc,kBADP,CAKA,IAAIE,OAAaR,EACjB,GACEQ,EAAazB,EAAc,EAAG,SACvByB,IAAe,EAAKlB,MAAMC,SAEnC,EAAKU,cAAcG,KAAKI,GAExB,EAAKH,SAAS,CACZd,QAASiB,EACThB,OAAQ,EAAKF,MAAME,OAAS,IAG9B,EAAKM,MAAQ,IACb,EAAKC,MAAQU,WAAW,EAAKF,WAAY,EAAKT,MAE9CY,QAAQC,IAAI,qBAAsB,EAAKrB,MAAMC,W,EAG/CqB,aAAe,WAET,EAAKtB,MAAMK,iBAGf,EAAKU,SAAS,CAAEV,gBAAgB,IAChC,EAAKY,e,EAGPD,YAAc,WACZO,aAAa,EAAKd,OAElB,EAAKM,SAAS,CAAEX,cAAc,K,EAGhCZ,aAAe,WACbgC,OAAOC,SAASC,U,uDAGR,IAAD,OACDpB,EAAUqB,KAAK3B,MAAMM,QAAQsB,KAAI,SAAAC,GACrC,OAAO,cAAC,EAAD,CACL3C,MAAO2C,EAAO3C,MACdG,MAAO,kBAAM,EAAKwB,aAAagB,EAAOtB,KACtCpB,OAAQ,EAAKa,MAAMC,UAAY4B,EAAOtB,IAHpBsB,EAAOtB,OAK7B,OACE,sBAAKtB,UAAU,MAAf,UACE,2CACA,+CAAkB0C,KAAK3B,MAAMT,SAC7B,8BAAMe,IAEN,wBAAQlB,QAASuC,KAAKL,aAAtB,mBACA,wBAAQlC,QAASuC,KAAKX,YAAtB,kBACCW,KAAK3B,MAAMI,cAAgB,cAAC,EAAD,CAAUb,MAAOoC,KAAK3B,MAAMT,MAAOC,aAAcmC,KAAKnC,sB,GA/FxEsC,aCLlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.08cb67fc.chunk.js","sourcesContent":["import React from 'react'\nimport './Circle.css'\n\nconst Circle = (props) => {\n    return (\n        <div className={`circle ${props.color} ${props.active ? \" active\" : \"\"}`} onClick={props.click}>\n            \n        </div>\n    )\n}\n\nexport default Circle;","import React from 'react';\nimport './GameOver.css';\n\nconst GameOver = (props) => {\n    return <div className=\"overlay\">\n        <div className=\"gameover-box\">\n            <h2>Game Over</h2>\n            <p>Your score was: {props.score}</p>\n            <button onClick={props.closeHandler}>Close</button>\n        </div>\n    </div>\n}\n\nexport default GameOver;","import './App.css';\nimport React, { Component } from 'react';\nimport Circle from './Components/Circle/Circle';\nimport GameOver from './Components/GameOver/GameOver';\n\n//gets random number 1-4 \nconst getRndInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nclass App extends Component {\n  state = {\n    score: 0,\n    current: 0,\n    rounds: 0,\n    counter: 0,\n    showGameOver: false,\n    gameHasStarted: false,\n    circles: [\n      { id: 1, color: \"green\" },\n      { id: 2, color: \"blue\" },\n      { id: 3, color: \"red\" },\n      { id: 4, color: \"yellow\" }\n    ]\n  }\n\n  pace = 1500;\n  timer = undefined;\n  pickedButtons = [];\n  hitButtons = [];\n\n  clickHandler = (id) => {\n    //push the clicked button to hitButtons array\n    this.hitButtons.push(id);\n    //compare if the button clicked is the same as the active button, if not then it's game over! Really strict rules here!\n    if (this.hitButtons[this.state.counter] !== this.pickedButtons[this.state.counter]) {\n      this.stopHandler();\n      return\n    }\n    this.setState({\n      score: this.state.score + 1,\n      counter: this.state.counter + 1,\n      rounds: 0\n    })\n  }\n\n  nextCircle = () => {\n\n    if (this.state.rounds >= 10) {\n      this.stopHandler();\n      return;\n    }\n\n    let nextActive = undefined;\n    do {\n      nextActive = getRndInteger(1, 4);\n    } while (nextActive === this.state.current);\n\n    this.pickedButtons.push(nextActive);\n\n    this.setState({\n      current: nextActive,\n      rounds: this.state.rounds + 1\n    })\n\n    this.pace *= 0.97;\n    this.timer = setTimeout(this.nextCircle, this.pace)\n\n    console.log('Active circle is: ', this.state.current);\n  }\n\n  startHandler = () => {\n    //prevents the game from being started several times\n    if (this.state.gameHasStarted) {\n      return\n    }\n    this.setState({ gameHasStarted: true })\n    this.nextCircle();\n  }\n\n  stopHandler = () => {\n    clearTimeout(this.timer);\n\n    this.setState({ showGameOver: true });\n  }\n\n  closeHandler = () => {\n    window.location.reload();\n}\n\n  render() {\n    const circles = this.state.circles.map(circle => {\n      return <Circle key={circle.id}\n        color={circle.color}\n        click={() => this.clickHandler(circle.id)}\n        active={this.state.current === circle.id} />\n    })\n    return (\n      <div className=\"App\">\n        <h1>Speedgame</h1>\n        <p>You score is: {this.state.score}</p>\n        <div>{circles}</div>\n\n        <button onClick={this.startHandler}>Start</button>\n        <button onClick={this.stopHandler}>Stop</button>\n        {this.state.showGameOver && <GameOver score={this.state.score} closeHandler={this.closeHandler} />}\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}